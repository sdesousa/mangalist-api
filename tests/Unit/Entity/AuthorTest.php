<?php

namespace App\Tests\Unit\Entity;

use App\Entity\Author;
use App\Entity\MangaAuthor;
use DateTime;
use PHPUnit\Framework\TestCase;

/**
 * @internal
 * @coversNothing
 */
class AuthorTest extends TestCase
{
    private Author $author;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->author = new Author();
    }

    public function testGetFirstame(): void
    {
        $value = 'Akira';
        $response = $this->author->setFirstname($value);

        self::assertInstanceOf(Author::class, $response);
        self::assertEquals($value, $this->author->getFirstname());
    }

    public function testGetLastame(): void
    {
        $value = 'Toriyama';
        $response = $this->author->setLastname($value);

        self::assertInstanceOf(Author::class, $response);
        self::assertEquals($value, $this->author->getLastname());
    }

    public function testGetPenname(): void
    {
        $value = 'ONE';
        $response = $this->author->setPenname($value);

        self::assertInstanceOf(Author::class, $response);
        self::assertEquals($value, $this->author->getPenname());
    }

    public function testGetFullname(): void
    {
        $firstname = 'Akira';
        $lastname = 'Toriyama';
        $penname = 'ONE';

        $this->author->setFirstname($firstname);
        $this->author->setLastname($lastname);
        $this->author->setPenname(null);
        self::assertEquals($lastname.' '.$firstname, $this->author->getFullname());
        $this->author->setPenname($penname);
        self::assertEquals($penname, $this->author->getFullname());
    }

    public function testGetMangaAuthors(): void
    {
        $mangaAuthor1 = new MangaAuthor();
        $mangaAuthor2 = new MangaAuthor();
        $mangaAuthor3 = new MangaAuthor();

        $this->author->addMangaAuthor($mangaAuthor1);
        $this->author->addMangaAuthor($mangaAuthor2);
        $this->author->addMangaAuthor($mangaAuthor3);

        self::assertCount(3, $this->author->getMangaAuthors());
        self::assertTrue($this->author->getMangaAuthors()->contains($mangaAuthor1));
        self::assertTrue($this->author->getMangaAuthors()->contains($mangaAuthor2));
        self::assertTrue($this->author->getMangaAuthors()->contains($mangaAuthor3));

        $response = $this->author->removeMangaAuthor($mangaAuthor3);

        self::assertInstanceOf(Author::class, $response);
        self::assertCount(2, $this->author->getMangaAuthors());
        self::assertTrue($this->author->getMangaAuthors()->contains($mangaAuthor1));
        self::assertTrue($this->author->getMangaAuthors()->contains($mangaAuthor2));
        self::assertFalse($this->author->getMangaAuthors()->contains($mangaAuthor3));
    }

    public function testGetUpdatedAt(): void
    {
        $updatedAt = new DateTime();
        $response = $this->author->setUpdatedAt($updatedAt);

        self::assertInstanceOf(Author::class, $response);
        self::assertEquals($updatedAt, $this->author->getUpdatedAt());
    }
}

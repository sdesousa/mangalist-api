<?php

namespace App\Tests\Unit\Entity;

use App\Entity\Author;
use App\Entity\AuthorRole;
use App\Entity\Manga;
use App\Entity\MangaAuthor;
use DateTime;
use PHPUnit\Framework\TestCase;

/**
 * @internal
 * @coversNothing
 */
class MangaAuthorTest extends TestCase
{
    private MangaAuthor $mangaAuthor;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mangaAuthor = new MangaAuthor();
    }

    public function testGetManga(): void
    {
        $value = new Manga();
        $response = $this->mangaAuthor->setManga($value);

        self::assertInstanceOf(MangaAuthor::class, $response);
        self::assertEquals($value, $this->mangaAuthor->getManga());
    }

    public function testGetAuthor(): void
    {
        $value = new Author();
        $response = $this->mangaAuthor->setAuthor($value);

        self::assertInstanceOf(MangaAuthor::class, $response);
        self::assertEquals($value, $this->mangaAuthor->getAuthor());
    }

    public function testGetAuthorRole(): void
    {
        $value = new AuthorRole();
        $response = $this->mangaAuthor->setAuthorRole($value);

        self::assertInstanceOf(MangaAuthor::class, $response);
        self::assertEquals($value, $this->mangaAuthor->getAuthorRole());
    }

    public function testGetUpdatedAt(): void
    {
        $updatedAt = new DateTime();
        $response = $this->mangaAuthor->setUpdatedAt($updatedAt);

        self::assertInstanceOf(MangaAuthor::class, $response);
        self::assertEquals($updatedAt, $this->mangaAuthor->getUpdatedAt());
    }
}

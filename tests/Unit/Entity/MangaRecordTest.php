<?php

namespace App\Tests\Unit\Entity;

use App\Entity\Manga;
use App\Entity\MangaRecord;
use App\Entity\Record;
use DateTime;
use PHPUnit\Framework\TestCase;

/**
 * @internal
 * @coversNothing
 */
class MangaRecordTest extends TestCase
{
    private MangaRecord $mangaRecord;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mangaRecord = new MangaRecord();
    }

    public function testGetManga(): void
    {
        $value = new Manga();
        $response = $this->mangaRecord->setManga($value);

        self::assertInstanceOf(MangaRecord::class, $response);
        self::assertEquals($value, $this->mangaRecord->getManga());
    }

    public function testGetRecord(): void
    {
        $value = new Record();
        $response = $this->mangaRecord->setRecord($value);

        self::assertInstanceOf(MangaRecord::class, $response);
        self::assertEquals($value, $this->mangaRecord->getRecord());
    }

    public function testGetPossessedVolume(): void
    {
        $value = 40;
        $response = $this->mangaRecord->setPossessedVolume($value);

        self::assertInstanceOf(MangaRecord::class, $response);
        self::assertEquals($value, $this->mangaRecord->getPossessedVolume());
    }

    public function testGetComment(): void
    {
        $value = 'lorem ipsum';
        $response = $this->mangaRecord->setComment($value);

        self::assertInstanceOf(MangaRecord::class, $response);
        self::assertEquals($value, $this->mangaRecord->getComment());
    }

    public function testGetUpdatedAt(): void
    {
        $updatedAt = new DateTime();
        $response = $this->mangaRecord->setUpdatedAt($updatedAt);

        self::assertInstanceOf(MangaRecord::class, $response);
        self::assertEquals($updatedAt, $this->mangaRecord->getUpdatedAt());
    }
}
